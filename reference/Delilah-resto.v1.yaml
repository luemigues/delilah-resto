openapi: 3.0.0
info:
  title: Delilah-resto
  version: '1.0'
  description: Backend API mockup for online food orders
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: get user
      tags:
        - Users
      responses:
        '200':
          description: OK
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    put:
      summary: update user
      tags:
        - Users
      responses:
        '200':
          description: OK
      operationId: put-users-userId
      description: Update the information of the user with the matching user ID.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                fullname:
                  type: string
                  minLength: 1
                address:
                  type: string
                  minLength: 1
                phone:
                  type: string
                  minLength: 1
              required:
                - fullname
                - address
                - phone
            examples:
              Example-1:
                value:
                  fullname: string
                  address: string
                  phone: string
    delete:
      summary: delete user
      tags:
        - Users
      responses:
        '204':
          description: No Content
      operationId: delete-users-userId
      description: Delete the user matching the ID.
  /users:
    post:
      summary: post user
      tags:
        - Users
      responses:
        '201':
          description: Created
      operationId: post-users
      description: Create new user
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                fullname:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
                address:
                  type: string
                  minLength: 1
                phone:
                  type: string
                  minLength: 1
                password:
                  type: string
                is_admin:
                  type: string
                  minLength: 1
              required:
                - username
                - fullname
                - email
                - address
                - phone
                - password
                - is_admin
            examples:
              Example-1:
                value:
                  username: string
                  fullname: string
                  email: string
                  address: string
                  phone: string
                  password: string
                  is_admin: string
    get:
      summary: get users
      tags:
        - Users
      responses:
        '200':
          description: OK
      operationId: get-users
      description: Get all users
    parameters: []
  /products:
    get:
      summary: get products
      tags:
        - Products
      responses:
        '200':
          description: OK
      operationId: get-products
      description: Get all existing products
    post:
      summary: post product
      tags:
        - Products
      responses:
        '201':
          description: Created
      operationId: post-products
      description: Add new product
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                price:
                  type: number
                img_url:
                  type: string
                  minLength: 1
              required:
                - name
                - price
                - img_url
            examples:
              Example 1:
                value:
                  name: string
                  price: 0
                  img_url: string
        description: ''
  '/products/{productId}':
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
        description: Id of existing product
    get:
      summary: Get Product Info by Product ID
      tags:
        - Products
      responses:
        '200':
          description: OK
      operationId: get-products-productId
      description: Retrieve the information of the product with the matching ID.
    put:
      summary: Update product
      operationId: put-products-productId
      responses:
        '200':
          description: OK
      description: Edit existing product
      parameters:
        - schema:
            type: string
          in: header
          name: Authentication
          description: ADMIN Auth
          required: true
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                price:
                  type: number
                img_url:
                  type: string
                  minLength: 1
              required:
                - name
                - price
                - img_url
            examples:
              Example 1:
                value:
                  name: string
                  price: 0
                  img_url: string
      tags:
        - Products
    delete:
      summary: Delete product
      operationId: delete-products-productId
      responses:
        '204':
          description: No Content
      description: Delete existing product
      parameters:
        - schema:
            type: string
          in: header
          name: Authentication
          description: ADMIN Auth
          required: true
      tags:
        - Products
  /orders:
    get:
      summary: get orders
      tags:
        - order
      responses:
        '200':
          description: OK
      operationId: get-orders
      description: Retrieve all the orders
    post:
      summary: post order
      tags:
        - order
      responses:
        '201':
          description: Created
      operationId: post-orders
      description: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                products:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    required:
                      - amount
                      - product_id
                    properties:
                      amount:
                        type: number
                      product_id:
                        type: number
                payment_method:
                  type: string
                  minLength: 1
              required:
                - products
                - payment_method
            examples:
              Pedido 1:
                value:
                  products:
                    - amount: 0
                      product_id: 0
                  payment_method: string
        description: ''
  '/orders/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        description: Id of existing order
        required: true
    get:
      summary: get order
      tags:
        - order
      responses:
        '200':
          description: OK
      operationId: get-orders-orderId
      description: Retrieve the information of the order with the matching that ID.
    put:
      summary: update order
      tags:
        - order
      responses:
        '200':
          description: OK
      operationId: put-orders-orderId
      description: Edit the information of the order with the matching the ID.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                status:
                  type: string
                  minLength: 1
                payment_method:
                  type: string
                  minLength: 1
              required:
                - status
                - payment_method
            examples:
              Example 1:
                value:
                  status: string
                  payment_method: string
    delete:
      summary: delete order
      tags:
        - order
      responses:
        '204':
          description: No Content
      operationId: delete-orders-orderId
      description: Delete the order matching the ID.
  '/users/{login}':
    post:
      summary: ''
      operationId: post-users-login
      responses:
        '200':
          description: OK
      description: Authenticate user
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
              required:
                - username
                - password
            examples:
              example-1:
                value:
                  username: string
                  password: string
        description: Username and password needed to autheticate user for login
      tags:
        - Users
    parameters:
      - schema:
          type: string
        name: login
        in: path
        required: true
        description: User autentication
components:
  schemas:
    User:
      title: User
      type: object
      description: User information schema
      x-examples:
        Lucia Migues:
          id: 0
          fullname: Lucia Migues
          email: user@example.com
          address: Roosevelt 5600
          phone: 116864123
          username: lumigues
          password: 1235
          is_admin: true
          is_active: true
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        fullname:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
          format: date
          example: '1997-10-31'
        phone:
          type: number
          description: Set to true if the user's email has been verified.
        username:
          type: string
        password:
          type: string
          format: password
        is_admin:
          type: boolean
        is_active:
          type: boolean
      required:
        - id
        - fullname
        - email
        - phone
        - username
        - password
    Product:
      title: Product
      type: object
      description: Product Schema
      x-examples:
        Hamburguesa Clásica:
          id: 0
          name: Hamburguesa Clásica
          price: 350
          img_url: 'https://www.demoslavueltaaldia.com/sites/default/files/styles/recetas_listado/public/hamburguesas-caseras-venezolanas.jpg?itok=YrUexcMF'
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        img_url:
          type: string
      required:
        - id
        - name
        - price
    Order:
      title: Order
      type: object
      description: Order Schema
      x-examples:
        Pedido 1:
          id: 0
          user:
            id: 0
            fullname: Nombre Apellido
            email: user@example.com
            address: Calle 123
            phone: 123456
            username: usuario11
            password: null
            is_admin: false
          status: confirmado
          time: 12.52PM
          description:
            - id: 0
              name: hamburguesa clasica
              price: 300
              img_url: url.com/hamburguesa
          payment_amount: 300
          payment_method: efectivo
      properties:
        id:
          type: integer
        user_id:
          $ref: '#/components/schemas/User'
        status:
          type: string
        time:
          type: string
        description:
          type: string
        payment_amount:
          type: number
        payment_method:
          type: string
        order_products:
          $ref: '#/components/schemas/Order-Product'
      required:
        - id
        - user_id
        - payment_method
    Order-Product:
      title: Order-Product
      type: object
      x-examples:
        example-1:
          id: 0
          order_id: 0
          product_id: 0
          amount: 0
      properties:
        id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        amount:
          type: number
      required:
        - id
        - order_id
        - product_id
        - amount
  securitySchemes: {}
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
    productId:
      name: productId
      in: path
      required: true
      schema:
        type: string
    orderId:
      name: orderId
      in: path
      required: true
      schema:
        type: string
    login:
      name: login
      in: path
      required: true
      schema:
        type: string
tags:
  - name: order
  - name: Products
  - name: Users
